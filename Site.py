from flask import Flask, render_template, request, redirect, url_for, session, jsonify
import sqlite3
import os
from outline_vpn.outline_vpn import OutlineVPN
from aiogram import Bot
import threading
import asyncio

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN API
SERVER_HOST = "147.45.224.62"
SERVER_PORT = "65146"  
API_SECRET = "Kek-PEeOq-iXLyjmmuOtRQ"
CERT_SHA256 = "6c4d53ceb6fc4ba7c35c06cc6467f278b0234352626bb2fad23f3fe0b143a7cf"

API_URL = f"https://{SERVER_HOST}:{SERVER_PORT}/{API_SECRET}"
vpn_client = OutlineVPN(api_url=API_URL, cert_sha256=CERT_SHA256)

TOKEN = "7741477291:AAEnUfLEzqtDBx4ve0F-G2fgGPOdyBowLKQ"
bot = Bot(token=TOKEN)

app = Flask(__name__)
app.secret_key = 'supersecretkey'

event_loop = asyncio.new_event_loop()
threading.Thread(target=event_loop.run_forever, daemon=True).start()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def connect_db():
    db_name = "vpn_users.sql"
    if not os.path.exists(db_name):
        raise FileNotFoundError(f"Database {db_name} does not exist.")
    return sqlite3.connect(db_name, check_same_thread=False)

# –ì–ª–∞–≤–Ω–∞—è —Å—Ç—Ä–∞–Ω–∏—Ü–∞
@app.route('/')
def index():
    session.pop('logged_in', None)
    return render_template('login.html')

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Ö–æ–¥–∞
@app.route('/login', methods=['POST'])
def login():
    username = request.form.get('username')
    password = request.form.get('password')

    if username == 'admin' and password == 'admin123':
        session['logged_in'] = True
        return redirect(url_for('dashboard'))
    else:
        return render_template('login.html', error="–ù–µ–≤–µ—Ä–Ω—ã–π –ª–æ–≥–∏–Ω –∏–ª–∏ –ø–∞—Ä–æ–ª—å")

# –ü–∞–Ω–µ–ª—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
@app.route('/dashboard')
def dashboard():
    if 'logged_in' not in session or not session['logged_in']:
        return redirect(url_for('index'))
    return render_template('dashboard.html')

# API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î
@app.route('/api/data', methods=['GET'])
def get_data():
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        conn = connect_db()
        cursor = conn.cursor()

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        cursor.execute("SELECT id, user_id, key_id, key, subscription_end, –ø–æ–¥–ø–∏—Å–∫–∞ FROM users")
        records = cursor.fetchall()

        if not records:
            print("‚ö† –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞ –∏–ª–∏ –Ω–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!")
            return jsonify({"error": "No users found"}), 404

        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –¥–∞–Ω–Ω—ã–µ –≤ JSON
        data = []
        for row in records:
            record_id, user_id, key_id, key, subscription_end, –ø–æ–¥–ø–∏—Å–∫–∞ = row
            data.append({
                "id": record_id,
                "user_id": user_id,
                "key_id": key_id,
                "key": key,
                "subscription_end": subscription_end,
                "–ø–æ–¥–ø–∏—Å–∫–∞": –ø–æ–¥–ø–∏—Å–∫–∞,
                "is_active": bool(–ø–æ–¥–ø–∏—Å–∫–∞)  # –ü–æ–ª–∑—É–Ω–æ–∫ —Å–ø—Ä–∞–≤–∞ (True) –∏–ª–∏ —Å–ª–µ–≤–∞ (False)
            })

        conn.close()  # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–µ—Ä–µ–¥ –≤–æ–∑–≤—Ä–∞—Ç–æ–º –¥–∞–Ω–Ω—ã—Ö
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(data)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –ë–î")  # –õ–æ–≥ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

        return jsonify({"records": data})  # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î: {e}")
        return jsonify({"error": str(e)}), 500


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è key_id –∏–∑ VPN-–∫–ª—é—á–∞
def extract_key_id(vpn_key):
    if vpn_key:
        print(f"üîë –ù–∞–π–¥–µ–Ω key_id: {vpn_key}")
        return vpn_key  # –¢–µ–ø–µ—Ä—å –≤ –ë–î —É–∂–µ —Ö—Ä–∞–Ω–∏—Ç—Å—è key_id
    print("‚ùå –û—à–∏–±–∫–∞: key_id –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –≤ –ë–î")
    return None


# API –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–∫–∞–º–∏
@app.route('/api/subscription', methods=['POST'])
def update_subscription():
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        user_id = request.args.get('user_id')
        action = request.args.get('action')

        if not user_id or not action:
            return jsonify({"error": "Missing 'user_id' or 'action' parameter"}), 400

        new_status = 1 if action == 'activate' else 0
        new_subscription_end = 30 if new_status == 1 else 0

        conn = connect_db()
        cursor = conn.cursor()

        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –ø–æ–¥–ø–∏—Å–∫–∏ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("UPDATE users SET –ø–æ–¥–ø–∏—Å–∫–∞ = ?, subscription_end = ? WHERE id = ?", (new_status, new_subscription_end, user_id))

        # –ü–æ–ª—É—á–∞–µ–º –∫–ª—é—á VPN –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        cursor.execute("SELECT key_id, user_id FROM users WHERE id = ?", (user_id,))
        key_data = cursor.fetchone()
        conn.commit()
        conn.close()

        if key_data and key_data[0]:
            key_id = key_data[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º `key_id`
            telegram_user_id = key_data[1]  # ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
            if key_id:
                print(f"üîë –ù–∞–π–¥–µ–Ω –∫–ª—é—á –¥–ª—è user_id {user_id}: {key_id}")

                # –ï—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ (1) ‚Üí —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —É—Å–ª–æ–≤–Ω—ã–π "–±–µ–∑–ª–∏–º–∏—Ç"
                if new_status == 1:
                    max_limit = 10**15
                    vpn_client.add_data_limit(key_id, max_limit)
                    print(f"‚úÖ –£—Å–ª–æ–≤–Ω—ã–π –±–µ–∑–ª–∏–º–∏—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id {user_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    send_message_sync(telegram_user_id, "‚úÖ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ 30 –¥–Ω–µ–π!")
                else:
                    vpn_client.add_data_limit(key_id, 100 * 1024 * 1024)
                    print(f"‚õî –õ–∏–º–∏—Ç 100 –ú–ë —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –¥–ª—è user_id {user_id}")

                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
                    send_message_sync(telegram_user_id, "‚ùå –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å.")
            else:
                print(f"‚ö† –û—à–∏–±–∫–∞: –ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å key_id –¥–ª—è user_id {user_id}")
                return jsonify({"error": "Failed to extract key_id"}), 500
        else:
            print(f"‚ö† –û—à–∏–±–∫–∞: –ö–ª—é—á –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ë–î –¥–ª—è user_id {user_id}")
            return jsonify({"error": "No VPN key found"}), 404

        return jsonify({"success": True, "new_status": new_status})
    except Exception as e:
        return jsonify({"error": str(e)}), 500

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot
async def send_message(chat_id, text):
    try:
        await bot.send_message(chat_id, text)
        print(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤—ã–∑–æ–≤–∞ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
def send_message_sync(chat_id, text):
    future = asyncio.run_coroutine_threadsafe(send_message(chat_id, text), event_loop)
    try:
        future.result()  # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π —á–µ—Ä–µ–∑ Telegram Bot
async def send_message(chat_id, text):
    try:
        await bot.send_message(chat_id, text)
        print(f"üì§ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

@app.route('/api/broadcast', methods=['POST'])
def broadcast_message():
    if 'logged_in' not in session or not session['logged_in']:
        return jsonify({"error": "Unauthorized"}), 401

    try:
        data = request.get_json()
        message = data.get('message')

        if not message:
            return jsonify({"error": "Message is empty"}), 400

        conn = connect_db()
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ user_id –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        cursor.execute("SELECT user_id FROM users")
        users = cursor.fetchall()
        conn.close()

        if not users:
            return jsonify({"error": "No users found in the database"}), 404

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–∞–∂–¥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        for (user_id,) in users:
            send_message_sync(user_id, message)

        print(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {len(users)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º.")
        return jsonify({"success": True, "sent_to": len(users)})
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return jsonify({"error": str(e)}), 500

# –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
@app.route('/logout', methods=['POST'])
def logout():
    session.pop('logged_in', None)
    return redirect(url_for('index'))

if __name__ == '__main__':
    app.run(host='0.0.0.0', port=5000)
