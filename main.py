import asyncio
import sqlite3
import datetime
from aiogram import Bot, Dispatcher
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.filters import Command
from aiogram.types import CallbackQuery, FSInputFile
from outline_vpn.outline_vpn import OutlineVPN
from aiogram import Router
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.enums import ContentType 

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ VPN
TOKEN = "7741477291:AAEnUfLEzqtDBx4ve0F-G2fgGPOdyBowLKQ"
SERVER_HOST = "147.45.224.62"
SERVER_PORT = "65146"  
API_SECRET = "Kek-PEeOq-iXLyjmmuOtRQ"
CERT_SHA256 = "6c4d53ceb6fc4ba7c35c06cc6467f278b0234352626bb2fad23f3fe0b143a7cf"

API_URL = f"https://{SERVER_HOST}:{SERVER_PORT}/{API_SECRET}"
vpn_client = OutlineVPN(api_url=API_URL, cert_sha256=CERT_SHA256)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=TOKEN)
dp = Dispatcher()
router = Router()  # –°–æ–∑–¥–∞–µ–º Router –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤

ADMIN_ID = 845482806  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ Telegram
dp.include_router(router)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def init_db():
    conn = sqlite3.connect("vpn_users.sql")
    cursor = conn.cursor()
    cursor.execute('''CREATE TABLE IF NOT EXISTS users (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        user_id INTEGER UNIQUE,
                        key_id TEXT,
                        key TEXT,
                        subscription_end INTEGER,
                        –ø–æ–¥–ø–∏—Å–∫–∞ BOOLEAN DEFAULT 0)''')
    conn.commit()
    conn.close()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
def connect_db():
    return sqlite3.connect("vpn_users.sql", check_same_thread=False)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ VPN-–∫–ª—é—á–∞
async def generate_vpn_key(subscription: bool):
    try:
        new_key = vpn_client.create_key()
        key_id = new_key.key_id
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ª–∏–º–∏—Ç 100 –ú–ë, –µ—Å–ª–∏ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
        vpn_client.add_data_limit(key_id, 100 * 1024 * 1024)  

        return new_key.access_url, key_id
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞: {e}")
        return None, None

# –ö–æ–º–∞–Ω–¥–∞ "–ø–æ–¥–¥–µ—Ä–∂–∫–∞"
@dp.message(Command("support"))
async def support_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–°–≤—è–∑–∞—Ç—å—Å—è —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π",
                    url="https://t.me/MrGrouli"
                )
            ]
        ]
    )
    await message.answer(
        "üìû –ï—Å–ª–∏ —É –≤–∞—Å –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–µ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∏–∂–µ:",
        reply_markup=keyboard
    )

# –ö–æ–º–∞–Ω–¥–∞ —Å—Ç–∞—Ä—Ç
@dp.message(Command("start"))
async def start_command(message: Message):
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–ª—É—á–∏—Ç—å VPN-–∫–ª—é—á", callback_data="get_vpn_key")]
        ]
    )
    await message.answer("üëã –ü—Ä–∏–≤–µ—Ç!\n\nüóù –ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å VPN-–∫–ª—é—á", reply_markup=keyboard)

@dp.callback_query(lambda c: c.data == "get_vpn_key")
async def send_vpn_key(callback_query: CallbackQuery):
    user_id = callback_query.from_user.id

    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.edit_reply_markup(reply_markup=None)

    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ
    conn = sqlite3.connect("vpn_users.sql")
    cursor = conn.cursor()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∫–ª—é—á
    cursor.execute("SELECT key_id FROM users WHERE user_id = ?", (user_id,))
    existing_key = cursor.fetchone()

    if existing_key:
        await callback_query.message.answer("‚ÑπÔ∏è–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∫–ª—é—á. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É.")
        conn.close()
        return  # ‚¨Ö –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∫–ª—é—á–∞
    new_key, key_id = await generate_vpn_key(subscription=False)  # –õ–∏–º–∏—Ç 100 –ú–ë

    if new_key and key_id:
        print(f"üÜï –í—ã–¥–∞–Ω –Ω–æ–≤—ã–π VPN-–∫–ª—é—á. –°–æ—Ö—Ä–∞–Ω–µ–Ω key_id: {key_id}")

        # ‚¨á –í–ê–ñ–ù–û: –°–æ—Ö—Ä–∞–Ω—è–µ–º `key_id`, –∞ –Ω–µ `new_key`
        cursor.execute("INSERT INTO users (user_id, key_id, key, subscription_end, –ø–æ–¥–ø–∏—Å–∫–∞) VALUES (?, ?, ?, ?, ?)",
                       (user_id, key_id, new_key, 30, False))
        conn.commit()
        conn.close()

        await callback_query.message.answer("‚ÑπÔ∏è –ü–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å —á–µ—Ä–µ–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline VPN.\n\n1. –°–∫–∞—á–∞—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline:\n–°—Å—ã–ª–∫–∞ –¥–ª—è iOS: https://apps.apple.com/kz/app/outline-app/id1356177741\n–°—Å—ã–ª–∫–∞ –¥–ª—è Android: https://play.google.com/store/apps/details?id=org.outline.android.client\n\n2. –°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á\n\n3. –û—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ Outline –∏ –≤—Å—Ç–∞–≤–∏—Ç—å –∫–ª—é—á")
        await callback_query.message.answer(f"üóù –í–∞—à VPN-–∫–ª—é—á —Å –ª–∏–º–∏—Ç–æ–º 100–º–±:")
        await callback_query.message.answer(f"{new_key}")
        await callback_query.message.answer(f"‚ÑπÔ∏è –í–∞—à —Ç–µ—Å—Ç–æ–≤—ã–π –∫–ª—é—á –¥–µ–π—Å—Ç–≤—É–µ—Ç –¥–ª—è –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞")

        # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
        video_path = "./Videos/iOS_automation.MP4"
        video = FSInputFile(video_path)
        await bot.send_document(
            chat_id=callback_query.from_user.id,
            document=video,
            caption="üìå –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ VPN –Ω–∞ iOS –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –≤–∫–ª—é—á–µ–Ω–∏—è –∏ –≤—ã–∫–ª—é—á–µ–Ω–∏—è VPN –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–π, –±–µ–∑ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –≤–∫–ª—é—á–∞—Ç—å –∏–ª–∏ –≤—ã–∫–ª—é—á–∞—Ç—å –µ–≥–æ –≤—Ä—É—á–Ω—É—é."
        )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="–•–æ—á—É –±–µ–∑–ª–∏–º–∏—Ç", callback_data="set_vpn_key_free")]
            ]
        )
        await bot.send_message(
            user_id,
            "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑–ª–∏–º–∏—Ç–∞ VPN –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 199 —Ä—É–±–ª–µ–π",
            reply_markup=keyboard
        )
    else:
        await callback_query.message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–ª—é—á–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—á–µ–Ω–æ"
@dp.callback_query(lambda c: c.data == "get_vpn_key")
async def got_vpn_key(callback_query: CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.edit_text(
        "‚úÖ –í—ã –ø–æ–ª—É—á–∏–ª–∏ VPN-–∫–ª—é—á.",
    )  

@dp.callback_query(lambda c: c.data == "set_vpn_key_free")
async def request_payment(callback_query: CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ –∏–∑ —Å–æ–æ–±—â–µ–Ω–∏—è
    await callback_query.message.edit_reply_markup(reply_markup=None)

    await callback_query.message.answer(
        # "üí≥ –û–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –±–µ–∑–ª–∏–º–∏—Ç–∞ VPN –Ω–∞ –≤—Å–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.\n\nüí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –ø–æ–¥–ø–∏—Å–∫–∏: 199 —Ä—É–±–ª–µ–π\n\n"
        '‚ÄºÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É 2200 7013 3196 3378\n\nüìå –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—á–µ–Ω–æ" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —á–µ–∫–∞.\n\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞\n\n‚úÖ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 30 –¥–Ω–µ–π.',
    )

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ", callback_data="payment_done")]
            # [InlineKeyboardButton(text="–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_message")]
        ]
    )

    await bot.send_message(
        chat_id=callback_query.from_user.id,
        text='üìå –ö–∞–∫ —Ç–æ–ª—å–∫–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É, –Ω–∞–∂–º–∏—Ç–µ "–û–ø–ª–∞—á–µ–Ω–æ" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —á–µ–∫–∞.',
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "–û–ø–ª–∞—á–µ–Ω–æ"
@dp.callback_query(lambda c: c.data == "payment_done")
async def payment_done(callback_query: CallbackQuery):
    # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏, —Ä–µ–¥–∞–∫—Ç–∏—Ä—É—è —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.answer("üì∑ –ü—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —á–µ–∫–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–ª—É—á–µ–Ω–∏—è —Ñ–æ—Ç–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–ø–ª–∞—Ç—ã
@router.message(lambda message: message.content_type == ContentType.PHOTO)
async def confirm_payment(message: Message):
    user_id = message.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º key_id –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ë–î
    conn = connect_db()
    cursor = conn.cursor()
    cursor.execute("SELECT key_id FROM users WHERE user_id = ?", (user_id,))
    key_data = cursor.fetchone()
    conn.close()

    key_id = key_data[0] if key_data else "–ù–µ –Ω–∞–π–¥–µ–Ω"
    print(f"–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É {ADMIN_ID}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É. –ö–ª—é—á: {key_id}")
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–û–ø–ª–∞—Ç–∞ –Ω–µ –ø—Ä–æ—à–ª–∞",
                    callback_data=f"payment_failed:{user_id}"
                )
            ]
        ]
    )

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∞–¥–º–∏–Ω—É —Å user_id –∏ key_id
    await bot.send_message(
        ADMIN_ID,
        f"üì© –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ–ø–ª–∞—Ç–∏–ª –ø–æ–¥–ø–∏—Å–∫—É.\nüîë –ö–ª—é—á –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {key_id}.",
        reply_markup=keyboard
    )

    # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º —Ñ–æ—Ç–æ –∞–¥–º–∏–Ω—É
    await bot.send_photo(
        ADMIN_ID, message.photo[-1].file_id
    )

    await message.answer("‚úÖ –í–∞—à–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –û–∂–∏–¥–∞–π—Ç–µ –ø—Ä–æ–≤–µ—Ä–∫–∏.")

@router.callback_query(lambda c: c.data.startswith("payment_failed"))
async def payment_failed(callback_query: CallbackQuery):
    # –ü–æ–ª—É—á–∞–µ–º user_id –∏–∑ callback_data
    user_id = int(callback_query.data.split(":")[1])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    await bot.send_message(
        user_id,
        "‚ùå –ù–µ –≤–µ—Ä–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç!\n\n–ï—Å–ª–∏ –≤—ã –ø—Ä–æ–∏–∑–≤–µ–ª–∏ –æ–ø–ª–∞—Ç—É, –ø—Ä–∏—à–ª–∏—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π —Å–∫—Ä–∏–Ω—à–æ—Ç. "
        "–ï—Å–ª–∏ –Ω–µ—Ç, —Ç–æ –æ–ø–ª–∞—Ç–∏—Ç–µ –∏ –ø—Ä–∏—à–ª–∏—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ —á–µ–∫–∞."
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ –∫–Ω–æ–ø–∫–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await callback_query.answer("–°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å–æ–∫
async def update_subscriptions():
    while True:
        conn = sqlite3.connect("vpn_users.sql")
        cursor = conn.cursor()

        # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        cursor.execute("SELECT user_id, key_id, key, subscription_end, –ø–æ–¥–ø–∏—Å–∫–∞ FROM users")
        users = cursor.fetchall()

        for user_id, key_id, key, days_left, –ø–æ–¥–ø–∏—Å–∫–∞ in users:
            if days_left > 0:
                days_left -= 1
                cursor.execute("UPDATE users SET subscription_end = ? WHERE user_id = ?", (days_left, user_id))
                keyboard = InlineKeyboardMarkup(
                    inline_keyboard=[
                        [InlineKeyboardButton(text="–û–ø–ª–∞—á–µ–Ω–æ", callback_data="payment_done")]
                    ]
                )
                # –û–ø–æ–≤–µ—â–µ–Ω–∏—è
                if days_left in [3, 2, 1]:
                    await bot.send_message(user_id, f'‚ùóÔ∏è –ß–µ—Ä–µ–∑ {days_left} –¥–Ω—è(–µ–π) –≤–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –Ω–∞ VPN –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è.\n\nüòé –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É\n\n‚ÄºÔ∏è –ü–æ–¥–ø–∏—Å–∫–∞ –æ–ø–ª–∞—á–∏–≤–∞–µ—Ç—Å—è –ø–µ—Ä–µ–≤–æ–¥–æ–º –Ω–∞ –∫–∞—Ä—Ç—É 2200 7013 3196 3378\n\nüìå –ü–æ—Å–ª–µ –æ–ø–ª–∞—Ç—ã –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "–û–ø–ª–∞—á–µ–Ω–æ" –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞ –∏–ª–∏ —á–µ–∫–∞.\n\nüë§ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —Å–∫—Ä–∏–Ω—à–æ—Ç –ø–ª–∞—Ç–µ–∂–∞\n\n‚úÖ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ –ø–æ–ª—É—á–∏–ª–∏ –±–µ–∑–ª–∏–º–∏—Ç–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ VPN –Ω–∞ 30 –¥–Ω–µ–π.', reply_markup=keyboard)
            
            # –û–∫–æ–Ω—á–∞–Ω–∏–µ –ø–æ–¥–ø–∏—Å–∫–∏
            if days_left <= 0 and –ø–æ–¥–ø–∏—Å–∫–∞:
                cursor.execute("UPDATE users SET –ø–æ–¥–ø–∏—Å–∫–∞ = 0 WHERE user_id = ?", (user_id,))
                
                # –°—Ç–∞–≤–∏–º –ª–∏–º–∏—Ç 100 –ú–ë, –Ω–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º `key_id`, –∞ –Ω–µ `key`
                vpn_client.add_data_limit(key_id, 0)


                await bot.send_message(user_id, "üìâ –í–∞—à–∞ –ø–æ–¥–ø–∏—Å–∫–∞ –∏—Å—Ç–µ–∫–ª–∞. –õ–∏–º–∏—Ç VPN —Ç–µ–ø–µ—Ä—å 0 –ú–ë.\n\nüòé –ü—Ä–æ–¥–ª–∏—Ç–µ –ø–æ–¥–ø–∏—Å–∫—É")

        conn.commit()
        conn.close()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ –¥–µ–Ω—å
        await asyncio.sleep(86400)

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    init_db()
    asyncio.create_task(update_subscriptions())  # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–æ–∫
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())